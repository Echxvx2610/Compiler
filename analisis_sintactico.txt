# def verificar_errores_tokens(tokens):
        #     """
        #     Verifica errores específicos para cada tipo de token.
        #     Retorna una lista de errores encontrados.
        #     """
        #     errores = []
        #     variables_declaradas = set()
        #     funciones_declaradas = set()
            
        #     # Rastrear el ámbito actual usando una pila
        #     ambitos = [set()]  # Lista de conjuntos de variables
            
        #     # Rastrear bloques de código
        #     nivel_bloque = 0
        #     bloques_anidados = []  # Para rastrear if, for, while, etc.
            
        #     # Verificar si hay bloques abiertos correctamente
        #     bloques_abiertos = 0
        #     parentesis_abiertos = 0
        #     corchetes_abiertos = 0
            
        #     # Verificar si estamos dentro de una declaración
        #     en_declaracion = False
        #     tipo_actual = None
            
        #     i = 0
        #     while i < len(tokens):
        #         tipo, token, num_linea = tokens[i]
                
        #         # Verificar apertura y cierre de bloques
        #         if token == '{':
        #             bloques_abiertos += 1
        #             # Crear un nuevo ámbito
        #             ambitos.append(set())
        #         elif token == '}':
        #             bloques_abiertos -= 1
        #             if bloques_abiertos < 0:
        #                 errores.append(f"Error en Linea {num_linea}: Llave de cierre '}}' sin llave de apertura correspondiente")
        #             elif ambitos:
        #                 # Eliminar el ámbito actual
        #                 ambitos.pop()
                
        #         # Verificar paréntesis
        #         elif token == '(':
        #             parentesis_abiertos += 1
        #         elif token == ')':
        #             parentesis_abiertos -= 1
        #             if parentesis_abiertos < 0:
        #                 errores.append(f"Error en Linea {num_linea}: Paréntesis de cierre ')' sin paréntesis de apertura correspondiente")
                
        #         # Verificar corchetes
        #         elif token == '[':
        #             corchetes_abiertos += 1
        #         elif token == ']':
        #             corchetes_abiertos -= 1
        #             if corchetes_abiertos < 0:
        #                 errores.append(f"Error en Linea {num_linea}: Corchete de cierre ']' sin corchete de apertura correspondiente")
                        
        #         # Verificar directivas de preprocesador (#include)
        #         elif token == '#':
        #             if i + 1 < len(tokens):
        #                 siguiente_tipo, siguiente_token, _ = tokens[i + 1]
        #                 if siguiente_token != "include":
        #                     errores.append(f"Error en Linea {num_linea}: Se espera 'include' después de '#'")
        #                 else:
        #                     # Verificar formato correcto del include
        #                     if i + 2 < len(tokens):
        #                         if tokens[i+2][0] not in ["Libreria", "Libreria_Personalizada"] and tokens[i+2][1] not in ['<', '"']:
        #                             errores.append(f"Error en Linea {num_linea}: Formato incorrecto después de '#include'")
        #             else:
        #                 errores.append(f"Error en Linea {num_linea}: Directiva de preprocesador incompleta")
                
        #         # Verificar palabras reservadas
        #         elif tipo == "Palabra_Reservada":
        #             # Estructura de control
        #             if token in ["if", "for", "while", "switch"]:
        #                 # Verificar que haya un paréntesis después
        #                 if i + 1 >= len(tokens) or tokens[i+1][1] != '(':
        #                     errores.append(f"Error en Linea {num_linea}: Falta paréntesis después de '{token}'")
        #                 bloques_anidados.append(token)
                    
        #             # Verificar else
        #             elif token == "else":
        #                 # Debe estar precedido por un bloque if
        #                 if not bloques_anidados or bloques_anidados[-1] != "if":
        #                     errores.append(f"Error en Linea {num_linea}: 'else' sin 'if' correspondiente")
                        
        #                 # Verificar si hay un 'if' después (else if)
        #                 if i + 1 < len(tokens) and tokens[i+1][1] == "if":
        #                     pass  # Esto es correcto (else if)
        #                 elif i + 1 < len(tokens) and tokens[i+1][1] != "{":
        #                     # Debería haber una llave o un 'if' después de else
        #                     errores.append(f"Error en Linea {num_linea}: Se espera '{{' o 'if' después de 'else'")
                    
        #             # Verificar return
        #             elif token == "return":
        #                 # Verificar que haya un punto y coma después
        #                 j = i + 1
        #                 while j < len(tokens) and tokens[j][1] != ';':
        #                     j += 1
        #                 if j >= len(tokens):
        #                     errores.append(f"Error en Linea {num_linea}: Falta punto y coma después de 'return'")
                
        #         # Verificar tipos de datos (para declaraciones)
        #         elif tipo == "Tipo_Dato" or token in TIPOS_DATOS:
        #             en_declaracion = True
        #             tipo_actual = token
                
        #         # Verificar identificadores (variables)
        #         elif tipo == "Identificador":
        #             # Variables en declaración
        #             if en_declaracion:
        #                 if token in [t for ambito in ambitos for t in ambito]:
        #                     errores.append(f"Error en Linea {num_linea}: Variable '{token}' ya ha sido declarada en este ámbito")
        #                 else:
        #                     # Añadir al ámbito actual
        #                     if ambitos:
        #                         ambitos[-1].add(token)
        #                     variables_declaradas.add(token)
                        
        #                 # Verificar inicialización
        #                 if i + 1 < len(tokens) and tokens[i+1][1] == '=':
        #                     # Verificar el valor después del signo igual
        #                     if i + 2 < len(tokens):
        #                         valor_tipo, valor, _ = tokens[i+2]
        #                         if valor_tipo not in ["Entero", "Decimal", "Cadena", "Caracter", "Identificador"]:
        #                             errores.append(f"Error en Linea {num_linea}: Valor inválido para inicialización de variable '{token}'")
                        
        #                 # Verificar punto y coma al final de la declaración
        #                 j = i + 1
        #                 while j < len(tokens) and tokens[j][1] not in [';', ',']:
        #                     j += 1
        #                 if j >= len(tokens) or tokens[j][1] not in [';', ',']:
        #                     errores.append(f"Error en Linea {num_linea}: Falta punto y coma o coma en la declaración de '{token}'")
                    
        #             # Variables en uso
        #             else:
        #                 # Verificar si la variable ha sido declarada
        #                 if token not in variables_declaradas and token not in [t for ambito in ambitos for t in ambito]:
        #                     errores.append(f"Error en Linea {num_linea}: Variable '{token}' usada sin declarar previamente")
                
        #         # Verificar identificadores de función
        #         elif tipo == "Identificador_Funcion":
        #             funciones_declaradas.add(token)
                    
        #             # Verificar parámetros dentro de los paréntesis
        #             if i + 1 < len(tokens) and tokens[i+1][1] == '(':
        #                 # Recorrer hasta el paréntesis de cierre
        #                 nivel = 1
        #                 j = i + 2
                        
        #                 # Lista para almacenar parámetros
        #                 parametros = []
        #                 param_actual = []
                        
        #                 while j < len(tokens) and nivel > 0:
        #                     if tokens[j][1] == '(':
        #                         nivel += 1
        #                     elif tokens[j][1] == ')':
        #                         nivel -= 1
        #                         if nivel == 0:
        #                             # Añadir el último parámetro si hay algo
        #                             if param_actual:
        #                                 parametros.append(param_actual)
        #                     elif tokens[j][1] == ',' and nivel == 1:
        #                         # Fin del parámetro actual
        #                         parametros.append(param_actual)
        #                         param_actual = []
        #                     else:
        #                         # Añadir a parámetro actual
        #                         param_actual.append(tokens[j])
                            
        #                     j += 1
                        
        #                 # Verificar cada parámetro
        #                 for param in parametros:
        #                     # Debe tener un tipo y un nombre
        #                     if len(param) < 2:
        #                         errores.append(f"Error en Linea {num_linea}: Parámetro incompleto en función '{token}'")
        #                     elif param[0][0] != "Tipo_Dato" and param[0][1] not in TIPOS_DATOS:
        #                         errores.append(f"Error en Linea {num_linea}: Parámetro sin tipo en función '{token}'")
                
        #         # Verificar llamadas a funciones
        #         elif tipo == "Llamada_Funcion":
        #             if token not in funciones_declaradas and token not in FUNCIONES_BIBLIOTECA:
        #                 errores.append(f"Error en Linea {num_linea}: Función '{token}' llamada sin declarar")
                    
        #             # Verificar punto y coma después de la llamada
        #             # Encontrar el paréntesis de cierre
        #             nivel = 0
        #             j = i
        #             while j < len(tokens):
        #                 if tokens[j][1] == '(':
        #                     nivel += 1
        #                 elif tokens[j][1] == ')':
        #                     nivel -= 1
        #                     if nivel == 0:
        #                         break
        #                 j += 1
                    
        #             # Después del paréntesis de cierre debe haber punto y coma
        #             if j < len(tokens) - 1 and tokens[j+1][1] != ';':
        #                 errores.append(f"Error en Linea {tokens[j][2]}: Falta punto y coma ';' después de la llamada a función '{token}'")
                
        #         # Verificar expresiones con operadores
        #         elif token in ['+', '-', '*', '/', '=']:
        #             # Verificar que haya operandos a ambos lados
        #             if i == 0 or i == len(tokens) - 1:
        #                 errores.append(f"Error en Linea {num_linea}: Operador '{token}' sin operandos suficientes")
        #             else:
        #                 izq_tipo, izq_token, _ = tokens[i-1]
                        
        #                 # El lado izquierdo debe ser un identificador, número o resultado de expresión
        #                 if izq_tipo not in ["Identificador", "Entero", "Decimal", "Caracter"] and izq_token != ')':
        #                     errores.append(f"Error en Linea {num_linea}: Expresión inválida: operando izquierdo de '{token}' no es válido")
                        
        #                 # Verificar el lado derecho si no estamos al final
        #                 if i < len(tokens) - 1:
        #                     der_tipo, der_token, _ = tokens[i+1]
        #                     if der_tipo not in ["Identificador", "Entero", "Decimal", "Caracter", "Cadena"] and der_token not in ['(', '+', '-']:
        #                         errores.append(f"Error en Linea {num_linea}: Expresión inválida: operando derecho de '{token}' no es válido")
                
        #         # Verificar errores de sintaxis de cadenas
        #         elif tipo == "Cadena_Error":
        #             errores.append(f"Error en Linea {num_linea}: Cadena sin cerrar: {token}")
                
        #         # Verificar errores de sintaxis de caracteres
        #         elif tipo == "Caracter_Error":
        #             errores.append(f"Error en Linea {num_linea}: Caracter mal formado: {token}")
                
        #         # Verificar punto y coma al final de sentencias
        #         if token == ';':
        #             en_declaracion = False
        #             tipo_actual = None
                
        #         i += 1
            
        #     # Verificar estructuras no cerradas al final
        #     if bloques_abiertos > 0:
        #         errores.append(f"Error: Hay {bloques_abiertos} llaves '{{' sin cerrar")
        #     if parentesis_abiertos > 0:
        #         errores.append(f"Error: Hay {parentesis_abiertos} paréntesis '(' sin cerrar")
        #     if corchetes_abiertos > 0:
        #         errores.append(f"Error: Hay {corchetes_abiertos} corchetes '[' sin cerrar")
            
        #     return errores


	def verificar_estructura_sintactica(tokens):
            """
            Verifica la estructura sintáctica de los tokens encontrados.
            
            Args:
                tokens (list): Lista de tokens con su tipo, valor y número de línea.
            
            Returns:
                list: Lista de errores sintácticos encontrados.
            """
            errores = []
            pila_llaves = []
            funciones_abiertas = []

            for i, (tipo, valor, linea) in enumerate(tokens):
                # Seguimiento de apertura y cierre de llaves
                if tipo == "Simbolo":
                    if valor == "{":
                        pila_llaves.append((linea, tipo, valor))
                    elif valor == "}":
                        if not pila_llaves:
                            errores.append(f"Error sintáctico en línea {linea}: Llave de cierre sin llave de apertura correspondiente")
                        else:
                            pila_llaves.pop()

                # Verificar estructura de funciones
                if tipo == "Identificador_Funcion" or tipo == "Main_Function":
                    # Buscar paréntesis de apertura y cierre
                    if i + 1 < len(tokens) and tokens[i + 1][1] != "(":
                        errores.append(f"Error sintáctico en línea {linea}: Falta paréntesis de apertura en definición de función {valor}")
                    else:
                        # Verificar si la función tiene llave de cierre
                        if not buscar_token_en_rango(tokens[i:], "Simbolo", "}"):
                            errores.append(f"Error sintáctico en línea {linea}: Función {valor} sin llave de cierre")
                    
                    # Marcar función como abierta
                    funciones_abiertas.append((valor, linea))

                # Verificar llamadas de función
                if tipo == "Llamada_Funcion":
                    # Verificar paréntesis de apertura después de la llamada
                    if i + 1 < len(tokens) and tokens[i + 1][1] != "(":
                        errores.append(f"Error sintáctico en línea {linea}: Falta paréntesis de apertura en llamada a función {valor}")
                    
                    # Verificar paréntesis de cierre
                    if not buscar_token_en_rango(tokens[i:], "Simbolo", ")"):
                        errores.append(f"Error sintáctico en línea {linea}: Falta paréntesis de cierre en llamada a función {valor}")

            # Verificar si quedaron llaves sin cerrar
            for linea, _, _ in pila_llaves:
                errores.append(f"Error sintáctico en línea {linea}: Llave de apertura sin cerrar")

            return errores

        def buscar_token_en_rango(tokens, tipo_buscado, valor_buscado, rango_maximo=10):
            """
            Busca un token específico en un rango limitado de tokens.
            
            Args:
                tokens (list): Lista de tokens
                tipo_buscado (str): Tipo de token a buscar
                valor_buscado (str): Valor específico del token
                rango_maximo (int): Número máximo de tokens a revisar
            
            Returns:
                bool: True si encuentra el token, False en caso contrario
            """
            for token in tokens[1:min(rango_maximo, len(tokens))]:
                if token[0] == tipo_buscado and token[1] == valor_buscado:
                    return True
            return False

        def buscar_siguiente_token(tokens, indice_inicial, tipo_buscado, valor_buscado):
            """
            Busca un token específico en los tokens siguientes.
            
            Args:
                tokens (list): Lista de tokens
                indice_inicial (int): Índice desde donde comenzar la búsqueda
                tipo_buscado (str): Tipo de token a buscar
                valor_buscado (str): Valor específico del token
            
            Returns:
                bool: True si encuentra el token, False en caso contrario
            """
            for token in tokens[indice_inicial+1:]:
                if token[0] == tipo_buscado and token[1] == valor_buscado:
                    return True
            return False

        def buscar_token_inverso(tokens, indice_inicial, tipo_buscado, valor_buscado):
            """
            Busca un token específico en los tokens anteriores.
            
            Args:
                tokens (list): Lista de tokens
                indice_inicial (int): Índice desde donde comenzar la búsqueda inversa
                tipo_buscado (str): Tipo de token a buscar
                valor_buscado (str): Valor específico del token
            
            Returns:
                bool: True si encuentra el token, False en caso contrario
            """
            for token in reversed(tokens[:indice_inicial]):
                if token[0] == tipo_buscado and token[1] == valor_buscado:
                    return True
            return False
