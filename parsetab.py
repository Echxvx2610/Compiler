
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'CHAR DIVIDE DOT DOUBLE ELSE EQUALS FLOAT FOR GREATER HASH ID IF INCLUDE INT LBRACE LESS LPAREN MINUS NUMBER PLUS RBRACE RETURN RPAREN SEMICOLON STDIO STRING_LITERAL TIMES VOID WHILE\n    program : includes program_elements\n            | program_elements\n    \n    includes : include_directive\n             | includes include_directive\n    include_directive : HASH INCLUDE LESS STDIO DOT ID GREATER\n    program_elements : function_definition\n                     | program_elements function_definition\n    \n    function_definition : type ID LPAREN RPAREN LBRACE statements RBRACE\n    \n    type : INT\n         | CHAR\n         | FLOAT\n         | DOUBLE\n         | VOID\n    \n    statements : statement\n               | statements statement\n    \n    statement : declaration_statement\n              | assignment_statement SEMICOLON\n              | if_statement\n              | for_statement\n              | while_statement\n              | return_statement\n              | function_call SEMICOLON\n    \n    declaration_statement : type ID SEMICOLON\n                          | type ID EQUALS expression SEMICOLON\n    \n    assignment_statement : ID EQUALS expression\n    \n    expression : NUMBER\n               | ID\n               | STRING_LITERAL\n               | expression PLUS expression\n               | expression MINUS expression\n               | expression TIMES expression\n               | expression DIVIDE expression\n               | LPAREN expression RPAREN\n    \n    if_statement : IF LPAREN condition RPAREN LBRACE statements RBRACE\n                 | IF LPAREN condition RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE\n    \n    for_statement : FOR LPAREN for_init SEMICOLON condition SEMICOLON for_update RPAREN LBRACE statements RBRACE\n    \n    for_init : declaration_statement\n             | assignment_statement\n             | empty\n    \n    for_update : assignment_statement\n               | function_call\n               | empty\n    \n    while_statement : WHILE LPAREN condition RPAREN LBRACE statements RBRACE\n    \n    condition : expression GREATER expression\n              | expression LESS expression\n              | expression\n    \n    return_statement : RETURN expression SEMICOLON\n    \n    function_call : ID LPAREN STRING_LITERAL RPAREN\n    empty :'
    
_lr_action_items = {'HASH':([0,2,4,14,40,],[6,6,-3,-4,-5,]),'INT':([0,2,3,4,5,13,14,15,23,27,28,29,31,32,33,34,40,44,45,46,47,49,56,68,86,87,91,92,94,95,100,103,104,105,106,107,108,],[8,8,8,-3,-6,8,-4,-7,8,8,-14,-16,-18,-19,-20,-21,-5,-8,-15,-17,-22,8,-23,-47,-24,8,8,8,8,-34,-43,8,8,8,8,-35,-36,]),'CHAR':([0,2,3,4,5,13,14,15,23,27,28,29,31,32,33,34,40,44,45,46,47,49,56,68,86,87,91,92,94,95,100,103,104,105,106,107,108,],[9,9,9,-3,-6,9,-4,-7,9,9,-14,-16,-18,-19,-20,-21,-5,-8,-15,-17,-22,9,-23,-47,-24,9,9,9,9,-34,-43,9,9,9,9,-35,-36,]),'FLOAT':([0,2,3,4,5,13,14,15,23,27,28,29,31,32,33,34,40,44,45,46,47,49,56,68,86,87,91,92,94,95,100,103,104,105,106,107,108,],[10,10,10,-3,-6,10,-4,-7,10,10,-14,-16,-18,-19,-20,-21,-5,-8,-15,-17,-22,10,-23,-47,-24,10,10,10,10,-34,-43,10,10,10,10,-35,-36,]),'DOUBLE':([0,2,3,4,5,13,14,15,23,27,28,29,31,32,33,34,40,44,45,46,47,49,56,68,86,87,91,92,94,95,100,103,104,105,106,107,108,],[11,11,11,-3,-6,11,-4,-7,11,11,-14,-16,-18,-19,-20,-21,-5,-8,-15,-17,-22,11,-23,-47,-24,11,11,11,11,-34,-43,11,11,11,11,-35,-36,]),'VOID':([0,2,3,4,5,13,14,15,23,27,28,29,31,32,33,34,40,44,45,46,47,49,56,68,86,87,91,92,94,95,100,103,104,105,106,107,108,],[12,12,12,-3,-6,12,-4,-7,12,12,-14,-16,-18,-19,-20,-21,-5,-8,-15,-17,-22,12,-23,-47,-24,12,12,12,12,-34,-43,12,12,12,12,-35,-36,]),'$end':([1,3,5,13,15,44,],[0,-2,-6,-1,-7,-8,]),'INCLUDE':([6,],[16,]),'ID':([7,8,9,10,11,12,22,23,25,27,28,29,31,32,33,34,39,42,45,46,47,48,49,50,55,56,57,68,69,70,71,72,77,78,79,86,87,91,92,93,94,95,100,103,104,105,106,107,108,],[17,-9,-10,-11,-12,-13,24,26,41,26,-14,-16,-18,-19,-20,-21,53,53,-15,-17,-22,53,66,53,53,-23,53,-47,53,53,53,53,53,53,53,-24,26,26,26,26,26,-34,-43,26,26,26,26,-35,-36,]),'LESS':([16,52,53,54,61,81,82,83,84,85,],[18,-26,-27,-28,78,-29,-30,-31,-32,-33,]),'LPAREN':([17,26,36,37,38,39,42,48,50,55,57,69,70,71,72,77,78,79,],[19,43,48,49,50,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'STDIO':([18,],[20,]),'RPAREN':([19,52,53,54,58,59,60,61,67,73,75,81,82,83,84,85,88,89,93,96,97,98,99,],[21,-26,-27,-28,-25,75,76,-46,80,85,-48,-29,-30,-31,-32,-33,-44,-45,-49,102,-40,-41,-42,]),'DOT':([20,],[22,]),'LBRACE':([21,76,80,101,102,],[23,87,91,103,104,]),'IF':([23,27,28,29,31,32,33,34,45,46,47,56,68,86,87,91,92,94,95,100,103,104,105,106,107,108,],[36,36,-14,-16,-18,-19,-20,-21,-15,-17,-22,-23,-47,-24,36,36,36,36,-34,-43,36,36,36,36,-35,-36,]),'FOR':([23,27,28,29,31,32,33,34,45,46,47,56,68,86,87,91,92,94,95,100,103,104,105,106,107,108,],[37,37,-14,-16,-18,-19,-20,-21,-15,-17,-22,-23,-47,-24,37,37,37,37,-34,-43,37,37,37,37,-35,-36,]),'WHILE':([23,27,28,29,31,32,33,34,45,46,47,56,68,86,87,91,92,94,95,100,103,104,105,106,107,108,],[38,38,-14,-16,-18,-19,-20,-21,-15,-17,-22,-23,-47,-24,38,38,38,38,-34,-43,38,38,38,38,-35,-36,]),'RETURN':([23,27,28,29,31,32,33,34,45,46,47,56,68,86,87,91,92,94,95,100,103,104,105,106,107,108,],[39,39,-14,-16,-18,-19,-20,-21,-15,-17,-22,-23,-47,-24,39,39,39,39,-34,-43,39,39,39,39,-35,-36,]),'GREATER':([24,52,53,54,61,81,82,83,84,85,],[40,-26,-27,-28,77,-29,-30,-31,-32,-33,]),'EQUALS':([26,41,66,],[42,57,42,]),'RBRACE':([27,28,29,31,32,33,34,45,46,47,56,68,86,92,94,95,100,105,106,107,108,],[44,-14,-16,-18,-19,-20,-21,-15,-17,-22,-23,-47,-24,95,100,-34,-43,107,108,-35,-36,]),'SEMICOLON':([30,35,41,49,51,52,53,54,56,58,61,62,63,64,65,74,75,81,82,83,84,85,86,88,89,90,],[46,47,56,-49,68,-26,-27,-28,-23,-25,-46,79,-37,-38,-39,86,-48,-29,-30,-31,-32,-33,-24,-44,-45,93,]),'NUMBER':([39,42,48,50,55,57,69,70,71,72,77,78,79,],[52,52,52,52,52,52,52,52,52,52,52,52,52,]),'STRING_LITERAL':([39,42,43,48,50,55,57,69,70,71,72,77,78,79,],[54,54,59,54,54,54,54,54,54,54,54,54,54,54,]),'PLUS':([51,52,53,54,58,61,73,74,81,82,83,84,85,88,89,],[69,-26,-27,-28,69,69,69,69,69,69,69,69,-33,69,69,]),'MINUS':([51,52,53,54,58,61,73,74,81,82,83,84,85,88,89,],[70,-26,-27,-28,70,70,70,70,70,70,70,70,-33,70,70,]),'TIMES':([51,52,53,54,58,61,73,74,81,82,83,84,85,88,89,],[71,-26,-27,-28,71,71,71,71,71,71,71,71,-33,71,71,]),'DIVIDE':([51,52,53,54,58,61,73,74,81,82,83,84,85,88,89,],[72,-26,-27,-28,72,72,72,72,72,72,72,72,-33,72,72,]),'ELSE':([95,],[101,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'includes':([0,],[2,]),'program_elements':([0,2,],[3,13,]),'include_directive':([0,2,],[4,14,]),'function_definition':([0,2,3,13,],[5,5,15,15,]),'type':([0,2,3,13,23,27,49,87,91,92,94,103,104,105,106,],[7,7,7,7,25,25,25,25,25,25,25,25,25,25,25,]),'statements':([23,87,91,103,104,],[27,92,94,105,106,]),'statement':([23,27,87,91,92,94,103,104,105,106,],[28,45,28,28,45,45,28,28,45,45,]),'declaration_statement':([23,27,49,87,91,92,94,103,104,105,106,],[29,29,63,29,29,29,29,29,29,29,29,]),'assignment_statement':([23,27,49,87,91,92,93,94,103,104,105,106,],[30,30,64,30,30,30,97,30,30,30,30,30,]),'if_statement':([23,27,87,91,92,94,103,104,105,106,],[31,31,31,31,31,31,31,31,31,31,]),'for_statement':([23,27,87,91,92,94,103,104,105,106,],[32,32,32,32,32,32,32,32,32,32,]),'while_statement':([23,27,87,91,92,94,103,104,105,106,],[33,33,33,33,33,33,33,33,33,33,]),'return_statement':([23,27,87,91,92,94,103,104,105,106,],[34,34,34,34,34,34,34,34,34,34,]),'function_call':([23,27,87,91,92,93,94,103,104,105,106,],[35,35,35,35,35,98,35,35,35,35,35,]),'expression':([39,42,48,50,55,57,69,70,71,72,77,78,79,],[51,58,61,61,73,74,81,82,83,84,88,89,61,]),'condition':([48,50,79,],[60,67,90,]),'for_init':([49,],[62,]),'empty':([49,93,],[65,99,]),'for_update':([93,],[96,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> includes program_elements','program',2,'p_program','analisis.py',99),
  ('program -> program_elements','program',1,'p_program','analisis.py',100),
  ('includes -> include_directive','includes',1,'p_includes','analisis.py',106),
  ('includes -> includes include_directive','includes',2,'p_includes','analisis.py',107),
  ('include_directive -> HASH INCLUDE LESS STDIO DOT ID GREATER','include_directive',7,'p_include_directive','analisis.py',115),
  ('program_elements -> function_definition','program_elements',1,'p_program_elements','analisis.py',120),
  ('program_elements -> program_elements function_definition','program_elements',2,'p_program_elements','analisis.py',121),
  ('function_definition -> type ID LPAREN RPAREN LBRACE statements RBRACE','function_definition',7,'p_function_definition','analisis.py',130),
  ('type -> INT','type',1,'p_type','analisis.py',136),
  ('type -> CHAR','type',1,'p_type','analisis.py',137),
  ('type -> FLOAT','type',1,'p_type','analisis.py',138),
  ('type -> DOUBLE','type',1,'p_type','analisis.py',139),
  ('type -> VOID','type',1,'p_type','analisis.py',140),
  ('statements -> statement','statements',1,'p_statements','analisis.py',146),
  ('statements -> statements statement','statements',2,'p_statements','analisis.py',147),
  ('statement -> declaration_statement','statement',1,'p_statement','analisis.py',156),
  ('statement -> assignment_statement SEMICOLON','statement',2,'p_statement','analisis.py',157),
  ('statement -> if_statement','statement',1,'p_statement','analisis.py',158),
  ('statement -> for_statement','statement',1,'p_statement','analisis.py',159),
  ('statement -> while_statement','statement',1,'p_statement','analisis.py',160),
  ('statement -> return_statement','statement',1,'p_statement','analisis.py',161),
  ('statement -> function_call SEMICOLON','statement',2,'p_statement','analisis.py',162),
  ('declaration_statement -> type ID SEMICOLON','declaration_statement',3,'p_declaration_statement','analisis.py',168),
  ('declaration_statement -> type ID EQUALS expression SEMICOLON','declaration_statement',5,'p_declaration_statement','analisis.py',169),
  ('assignment_statement -> ID EQUALS expression','assignment_statement',3,'p_assignment_statement','analisis.py',179),
  ('expression -> NUMBER','expression',1,'p_expression','analisis.py',185),
  ('expression -> ID','expression',1,'p_expression','analisis.py',186),
  ('expression -> STRING_LITERAL','expression',1,'p_expression','analisis.py',187),
  ('expression -> expression PLUS expression','expression',3,'p_expression','analisis.py',188),
  ('expression -> expression MINUS expression','expression',3,'p_expression','analisis.py',189),
  ('expression -> expression TIMES expression','expression',3,'p_expression','analisis.py',190),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','analisis.py',191),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression','analisis.py',192),
  ('if_statement -> IF LPAREN condition RPAREN LBRACE statements RBRACE','if_statement',7,'p_if_statement','analisis.py',204),
  ('if_statement -> IF LPAREN condition RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE','if_statement',11,'p_if_statement','analisis.py',205),
  ('for_statement -> FOR LPAREN for_init SEMICOLON condition SEMICOLON for_update RPAREN LBRACE statements RBRACE','for_statement',11,'p_for_statement','analisis.py',214),
  ('for_init -> declaration_statement','for_init',1,'p_for_init','analisis.py',220),
  ('for_init -> assignment_statement','for_init',1,'p_for_init','analisis.py',221),
  ('for_init -> empty','for_init',1,'p_for_init','analisis.py',222),
  ('for_update -> assignment_statement','for_update',1,'p_for_update','analisis.py',228),
  ('for_update -> function_call','for_update',1,'p_for_update','analisis.py',229),
  ('for_update -> empty','for_update',1,'p_for_update','analisis.py',230),
  ('while_statement -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE','while_statement',7,'p_while_statement','analisis.py',236),
  ('condition -> expression GREATER expression','condition',3,'p_condition','analisis.py',242),
  ('condition -> expression LESS expression','condition',3,'p_condition','analisis.py',243),
  ('condition -> expression','condition',1,'p_condition','analisis.py',244),
  ('return_statement -> RETURN expression SEMICOLON','return_statement',3,'p_return_statement','analisis.py',253),
  ('function_call -> ID LPAREN STRING_LITERAL RPAREN','function_call',4,'p_function_call','analisis.py',259),
  ('empty -> <empty>','empty',0,'p_empty','analisis.py',265),
]
